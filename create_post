#!/bin/bash

# create a file inside _posts
# with:
# front matter
# ---
# layout: post
# title:  "Proper Title Here"
# date:   YYYY-MM-DD HH:MM:SS +0530
# categories: category
# ---
# <new-line>

# Configuration
DEFAULT_LAYOUT="post"
DEFAULT_CATEGORY="miscellaneous"

# Description
description() {
    printf "Description:\n"
    printf "  Create a new post inside _posts/ with title, layout, date, categories\n  as default values or as input from command line.\n"
    printf "  The new file created is named as per: YYYY-MM-DD-title-string-data.md\n"
}

# Usage
usage() {
    printf "Usage:\n"
    printf "  create_post <opt_string> <parameters>\n"
    printf "  create_post [options]\n"
}

# Example Usage
example_usage() {
    printf "Example Usage:\n"
    printf "  create_post -c \"random_category\" -t \"this is a post\" -l \"post\"\n"
    printf "  create_post --title \"this is a post\"\n"
    printf "  create_post --category \"random_category\" --title \"random title\"\n"
    printf "  create_post --category \"random_category\" --title \"random title\"\n"
    printf "  create_post --category \"random_category\" --title \"random title\" --ignore_readme_update\n"
}

# Options
options() {
    printf "Options:\n"
    printf "  -c, --category <parameter-string>\t\tset the categories to the parameter string values\n"
    printf "  -l, --layout <parameter-string>\t\tset the layout value to the paramter string\n"
    printf "  -t, --title <parameter-string>\t\tset the title & filename using the parameter string\n"
    printf "  -i, --ignore_readme_update \t\t\tignore default behaviour of updating README.md\n"
    printf "  -h, --help \t\t\t\t\tdisplay the help\n"
}

ignore_readme_update() {
    printf "\nNOTE:\n"
    printf "By default, any new post successfully created is added to README.md\n"
    printf "If the README.md file does not exist, then this is omited.\n"
    printf "To suppress the default behaviour, append '-t' or '--ignore_readme_update'\n"
}

# ask help
ask_help() {
    printf "For help, run:\n"
    printf "  create_post -h\n"
    printf "  create_post --help\n"
}

# Help Function
help() {
    # Display Help
    description
    printf "\n"
    usage
    printf "\n"
    example_usage
    printf "\n"
    options
    printf "\n"
    ignore_readme_update
    printf "\n"
}


# Parse bash command line options using GNU-getopt
# This utility is not present in MacOS
# Install GNU-getopt to run this script
SHORT=c:l:t:ih
LONG=category:,layout:,title:,ignore_readme_update,help
OPTS=$(getopt --name create_post -o $SHORT --long $LONG -- "$@")


eval set -- "$OPTS"

while :
do
  case "$1" in
    -c | --category )
      category="$2"
      shift 2
      ;;
    -l | --layout )
      layout="$2"
      shift 2
      ;;
    -t | --title )
      title="$2"
      shift 2
      ;;
	-i | --ignore_readme_update )
	  ignore_readme_update=1
	  shift
	  ;;
    -h | --help)
      help
      exit 2
      ;;
    --)
      shift;
      break
      ;;
  esac
done


# check title cannot be empty
if [[ -z "$title" ]]; then
    echo "--title is non-optional argument"
    echo "Check out some example usages."
    echo
    example_usage
    echo
    ask_help
    echo
    exit 1 # exit with error
fi

# check layout & title
# if empty, populate with default value
[ -z "$category" ] && category=$DEFAULT_CATEGORY
[ -z "$layout" ] && layout=$DEFAULT_LAYOUT


# parse title into filename, date, time & timezone
# parsing is done in 4 steps
# 1. replace all special chars with spaces
# 2. remove beginning spaces, trailing spaces, and convert all middle spaces & tabs into single spacing
# 3. replace all single space into - (hyphen)
# 4. change all chars to lowercase
#
# However, that would be too simple to do, without any side-effect, right?
# The issue arises when there are multiple !, ? combinations
# these are special characters and are expanded by bash history
# the end result is hilarious with unwanted repitition and gibberish output
# So, there is a need to bypass this:
# Option 1: Use single quotes while inputing parameters
# but, as the sole user myself, I don't think I will always remember to do this
# So, Option 2: toggle history expansion if on, then perform string manipulation, then toggle back off
# Alas, Option 2 doesn't work!
# It seems that History Expansion is turned off by default
#
# So, now, there are 2 options:
# 1. Disable History Expansion by default
# 2. Alway use single quote
# The best option is to do both
#
# This is what happens when you go to resolve one bug, and end up with more bugs, YAY!
parsed_lowercase_title=$(echo $title | tr -c '[:alnum:]\~n\r' ' ' | awk '{$1=$1};1' | tr -c '[:alnum:]\n\r' '-' | tr 'A-Z' 'a-z')
parsed_date=$(date +"%Y-%m-%d")
parsed_time=$(date +"%T")
timezone=$(date +"%z")
# echo $parsed_lowercase_title
# echo $parsed_date
# echo $parsed_time
# echo $timezone

# create file based on time & title
filename="$parsed_date-$parsed_lowercase_title.md"
echo $filename
# check if file exists, else create
if [[ -f ./_posts/$filename ]]; then
    echo "Error creating file with title='$title'"
    echo "File: $filename already exists inside _posts/"
    echo "Use a different 'title' to create another file."
    echo
    exit 1 #exit with error
else
    # create the file inside _posts
    touch ./_posts/$filename
    echo "created $filename inside _posts/"
    echo
fi

# inject front matter into the file
echo "---" >> ./_posts/$filename
echo "layout: $layout" >> ./_posts/$filename
echo "title:  \"$title\"" >> ./_posts/$filename
echo "date: $parsed_date $parsed_time $timezone" >> ./_posts/$filename
echo "categories: $category" >> ./_posts/$filename
printf "description: >- \n\tAdd a post summary here...\n" >> ./_posts/$filename
echo "tags: [jekyll-blog, $category]" >> ./_posts/$filename
echo "---" >> ./_posts/$filename

# inject TOC & its inline CSS into the page
printf "\n<style type='text/css'>#markdown-toc::before" >> ./_posts/$filename
printf "{content:'Table of Contents';font-weight:700}" >> ./_posts/$filename
printf "#markdown-toc{border:3px solid #aaa;padding:1.5em;" >> ./_posts/$filename
printf "margin-left:0;display:inline-block}</style>\n" >> ./_posts/$filename
printf "\n* TOC\n" >> ./_posts/$filename
printf "{:toc}\n" >> ./_posts/$filename

# update README.md
update_readme() {
	# if README.md exists, only update then
	if [ -f "./README.md" ]; then
        printf "| $parsed_date | " >> ./README.md
        printf "[$category](https://biplobmanna.github.io/$category) | " >> README.md
        date_in_path=$(date +"%Y/%m/%d")
        printf "[\"$title\"](https://biplobmanna.github.io/$category/$date_in_path/$parsed_lowercase_title.html) | " >> README.md
        printf "[ðŸ“„](https://github.com/biplobmanna/biplobmanna.github.io/blob/main/_posts/$filename) |" >> README.md
        printf "\n"  >> README.md
    fi
}


# update README.md with details of blog post
# if ignore_readme_update DNE
if [ -z ${ignore_readme_update+x} ]; then
  update_readme
#   echo "README.md updated!";
# else
#   echo "README.md update ignored!";
fi
